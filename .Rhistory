plotOutput("graficoComparacao"),
leafletOutput("mapaComparacao"),
style = "background-color: #F5FAFF; padding: 10px; border-radius: 10px;"
),
tabPanel(
"Teste de Acurácia",
tableOutput("tabelaDistancias"),
style = "background-color: #F5FAFF; padding: 10px; border-radius: 10px;"
)
)
)
)
runApp('mapa e acuracia.R')
runApp('mapa e acuracia.R')
runApp('mapa e acuracia.R')
runApp('mapa e acuracia.R')
runApp('mapa e acuracia.R')
runApp('mapa e acuracia.R')
runApp('mapa e acuracia.R')
runApp('app2DISTANCIA.R')
runApp('app2acuracia.R')
runApp('aap2_ACURACIAGPT.R')
runApp('mapa e acuracia.R')
runApp('mapa e acuracia.R')
IC
duplicados_api <- dengue_geocoded_GOOGLE %>%
count(NU_NOTIFIC) %>%
filter(n > 1)
View(dengue_geocoded_OSM)
View(duplicados_api)
View(dengue_geocoded_GOOGLE)
library(shiny); runApp('app2acuracia.R')
library(shiny)
library(leaflet)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
rm(list = ls())
gc(T)
# Leia os bancos de dados
dengue_geocoded_ARCGIS <- read.csv("C:/Users/Sanglard/Desktop/R_Walter/DENGUE_ARCGIS.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_geocoded_OSM <- read.csv("C:/Users/Sanglard/Desktop/R_Walter/DENGUE_OSM.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_geocoded_GOOGLE <- read.csv("C:/Users/Sanglard/Desktop/R_Walter/DENGUE_GOOGLE_API.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_geocoded_GOOGLE <- read.csv("C:/Users/Sanglard/Desktop/R_Walter/DENGUE_GOOGLE.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_geocoded_CNEFE <- read.csv("C:/Users/Sanglard/Desktop/R_Walter/dengue_CNEFE.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
runApp('app2acuracia.R')
runApp('app2DISTANCIA.R')
runApp('aap2_ACURACIAGPT.R')
runApp('chatgpt_acuracia2712.R')
runApp('chatgpt_acuracia2712.R')
runApp('chatgpt_acuracia2712.R')
runApp('chatgpt_acuracia2712.R')
runApp('chatgpt_acuracia2712.R')
runApp('chatgpt_acuracia2712.R')
View(dengue_geocoded_CNEFE)
runApp('chatgpt_acuracia2712.R')
runApp('chatgpt_acuracia2712.R')
runApp('chatgpt_acuracia2712.R')
library(shiny)
library(leaflet)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
rm(list = ls())
gc(T)
runApp('chatgpt_acuracia2712.R')
runApp('chatgpt_acuracia2712.R')
runApp('chatgpt_acuracia2712.R')
library(shiny); runApp('chatgpt_acuracia2712.R')
runApp('chatgpt_acuracia2712.R')
runApp('chatgpt_acuracia2712.R')
library(shiny); runApp('chatgpt_acuracia2712.R')
runApp('chatgpt_acuracia2712_2.R')
# Leia os bancos de dados
dengue_geocoded_ARCGIS <- read.csv("C:/Users/Sanglard/Desktop/R_Walter/DENGUE_ARCGIS.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_geocoded_OSM <- read.csv("C:/Users/Sanglard/Desktop/R_Walter/DENGUE_OSM.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_geocoded_GOOGLE <- read.csv("C:/Users/Sanglard/Desktop/R_Walter/DENGUE_GOOGLE.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_geocoded_CNEFE <- read.csv("C:/Users/Sanglard/Desktop/R_Walter/dengue_CNEFE.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
# Função para tratamento de dados
processar_dados <- function(df) {
df %>%
mutate(
CS_RACA = case_when(
CS_RACA == 1 ~ "Branca",
CS_RACA == 2 ~ "Preta",
CS_RACA == 3 ~ "Amarela",
CS_RACA == 4 ~ "Parda",
CS_RACA == 5 ~ "Indígena",
CS_RACA == 9 ~ "Ignorado",
is.na(CS_RACA) ~ "Em branco"
),
CS_SEXO = case_when(
CS_SEXO == "M" ~ "Masculino",
CS_SEXO == "F" ~ "Feminino",
CS_SEXO == "I" ~ "Ignorado",
is.na(CS_SEXO) ~ "Em branco"
),
RESUL_NS1 = case_when(
RESUL_NS1 == 1 ~ "Positivo",
RESUL_NS1 == 2 ~ "Negativo",
RESUL_NS1 == 3 ~ "Inconclusivo",
RESUL_NS1 == 4 ~ "Não realizado",
is.na(RESUL_NS1) ~ "Em branco"
),
NU_IDADE_N = case_when(
NU_IDADE_N < 3999 ~ 0,
NU_IDADE_N >= 4000 ~ as.numeric(substr(as.character(NU_IDADE_N), 3, 4)),
TRUE ~ NA_real_
),
SG_UF_NOT = case_when(
SG_UF_NOT == 11 ~ "Rondônia",
SG_UF_NOT == 12 ~ "Acre",
SG_UF_NOT == 13 ~ "Amazonas",
SG_UF_NOT == 14 ~ "Roraima",
SG_UF_NOT == 15 ~ "Pará",
SG_UF_NOT == 16 ~ "Amapá",
SG_UF_NOT == 17 ~ "Tocantins",
SG_UF_NOT == 21 ~ "Maranhão",
SG_UF_NOT == 22 ~ "Piauí",
SG_UF_NOT == 23 ~ "Ceará",
SG_UF_NOT == 24 ~ "Rio Grande do Norte",
SG_UF_NOT == 25 ~ "Paraíba",
SG_UF_NOT == 26 ~ "Pernambuco",
SG_UF_NOT == 27 ~ "Alagoas",
SG_UF_NOT == 28 ~ "Sergipe",
SG_UF_NOT == 29 ~ "Bahia",
SG_UF_NOT == 31 ~ "Minas Gerais",
SG_UF_NOT == 32 ~ "Espírito Santo",
SG_UF_NOT == 33 ~ "Rio de Janeiro",
SG_UF_NOT == 35 ~ "São Paulo",
SG_UF_NOT == 41 ~ "Paraná",
SG_UF_NOT == 42 ~ "Santa Catarina",
SG_UF_NOT == 43 ~ "Rio Grande do Sul",
SG_UF_NOT == 50 ~ "Mato Grosso do Sul",
SG_UF_NOT == 51 ~ "Mato Grosso",
SG_UF_NOT == 52 ~ "Goiás",
SG_UF_NOT == 53 ~ "Distrito Federal",
TRUE ~ "Desconhecido"
)
)
}
# Aplicar o tratamento aos dados
dengue_geocoded_ARCGIS <- processar_dados(dengue_geocoded_ARCGIS)
dengue_geocoded_OSM <- processar_dados(dengue_geocoded_OSM)
dengue_geocoded_GOOGLE <- processar_dados(dengue_geocoded_GOOGLE)
dengue_geocoded_CNEFE <- processar_dados(dengue_geocoded_CNEFE)
# UI
ui <- fluidPage(
titlePanel("Painel de Geoencoding - Comparação de Distâncias"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
inputId = "apis_comparacao",
label = "Selecione as APIs para comparar:",
choices = c("Google", "ArcGIS", "OSM"),
selected = c("Google")
),
checkboxInput(
inputId = "exibir_cnefe",
label = "Exibir Dados do CNEFE (Padrão-Ouro)",
value = FALSE
),
sliderInput(
inputId = "threshold",
label = "Limiar de Distância (em metros):",
min = 0,
max = 1000,
value = 100,
step = 10
)
),
mainPanel(
tabsetPanel(
tabPanel(
"Tabela de Distâncias",
tableOutput("tabelaDistancias"),
plotOutput("graficoObservacoes")
),
tabPanel("Visualização Espacial dos Dados", leafletOutput("mapaAcuracia"))
)
)
)
)
# Server
server <- function(input, output, session) {
api_data <- reactive({
list(
"Google" = dengue_geocoded_GOOGLE,
"ArcGIS" = dengue_geocoded_ARCGIS,
"OSM" = dengue_geocoded_OSM,
"CNEFE" = dengue_geocoded_CNEFE
)
})
# Calcular distâncias e acurácia
output$tabelaDistancias <- renderTable({
selected_apis <- input$apis_comparacao
threshold <- input$threshold
if (length(selected_apis) < 1) {
return(data.frame(Mensagem = "Selecione pelo menos uma API para calcular distâncias e acurácia."))
}
results <- lapply(selected_apis, function(api) {
api_df <- api_data()[[api]]
cnefe_df <- api_data()[["CNEFE"]]
combined <- inner_join(
api_df %>% select(ID_UNICO, lat_api = lat, long_api = long),
cnefe_df %>% select(ID_UNICO, lat_cnefe = lat, long_cnefe = long),
by = "ID_UNICO"
)
if (nrow(combined) == 0) {
return(data.frame(API = api, Acuracia = NA, `Distância Média (m)` = NA))
}
api_sf <- st_as_sf(combined, coords = c("long_api", "lat_api"), crs = 4326, remove = FALSE)
cnefe_sf <- st_as_sf(combined, coords = c("long_cnefe", "lat_cnefe"), crs = 4326, remove = FALSE)
distancias <- st_distance(api_sf, cnefe_sf, by_element = TRUE)
distancias <- as.numeric(distancias)
combined$distancia <- distancias
assign(paste0(api, "_map_data"), combined, envir = .GlobalEnv)
acuracia <- mean(distancias <= threshold)
distancia_media <- mean(distancias)
data.frame(
API = api,
Acuracia = round(acuracia * 100, 2),
`Distância Média (m)` = round(distancia_media, 2)
)
})
do.call(rbind, results)
})
# Gráfico de observações por API
output$graficoObservacoes <- renderPlot({
selected_apis <- input$apis_comparacao
total_observacoes <- lapply(selected_apis, function(api) {
nrow(api_data()[[api]])
})
# Adiciona os dados do CNEFE, se selecionado
if (input$exibir_cnefe) {
total_observacoes <- c(total_observacoes, list(CNEFE = nrow(api_data()[["CNEFE"]])))
selected_apis <- c(selected_apis, "CNEFE")
}
total_observacoes_df <- data.frame(
API = selected_apis,
Observacoes = unlist(total_observacoes),
Percentual = unlist(total_observacoes) / 20433 * 100
)
ggplot(total_observacoes_df, aes(x = API, y = Observacoes, fill = API)) +
geom_bar(stat = "identity", color = "black", width = 0.7) +
geom_text(
aes(label = paste0(Observacoes, " (", round(Percentual, 2), "%)")),
vjust = -0.5,
size = 5
) +
theme_classic() +
labs(
title = "Número Total de Observações por API",
x = "API",
y = "Número de Observações"
) +
scale_y_continuous(
limits = c(0, max(total_observacoes_df$Observacoes) * 1.1),
expand = c(0, 0)
) +
theme(
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text = element_text(size = 12)
)
})
# Mapa interativo para visualização da acurácia
output$mapaAcuracia <- renderLeaflet({
selected_apis <- input$apis_comparacao
threshold <- input$threshold
exibir_cnefe <- input$exibir_cnefe
colors <- c("Google" = "green", "ArcGIS" = "red", "OSM" = "purple", "CNEFE" = "blue")
map <- leaflet() %>% addTiles()
for (api in selected_apis) {
api_data <- get(paste0(api, "_map_data"), envir = .GlobalEnv)
map <- map %>%
addCircleMarkers(
data = api_data,
lng = ~long_api,
lat = ~lat_api,
radius = 5,
color = colors[api],
fillOpacity = 0.7,
popup = ~paste0("API: ", api, "<br>Distância: ", round(distancia, 2), "m")
)
}
if (exibir_cnefe) {
map <- map %>%
addCircleMarkers(
data = dengue_geocoded_CNEFE,
lng = ~long,
lat = ~lat,
radius = 3,
color = colors["CNEFE"],
fillOpacity = 0.7,
popup = ~paste0("Padrão Ouro - ID: ", ID_UNICO)
)
}
map
})
# Mapa interativo para visualização da acurácia
output$mapaAcuracia <- renderLeaflet({
selected_apis <- input$apis_comparacao
threshold <- input$threshold
exibir_cnefe <- input$exibir_cnefe
map <- leaflet() %>% addTiles()
for (api in selected_apis) {
api_data <- get(paste0(api, "_map_data"), envir = .GlobalEnv)
map <- map %>%
addCircleMarkers(
data = api_data,
lng = ~long_api,
lat = ~lat_api,
radius = 5,
color = ifelse(api_data$distancia <= threshold, "green", "red"),
fillOpacity = 0.7,
popup = ~paste0("API: ", api, "<br>Distância: ", round(distancia, 2), "m")
)
}
if (exibir_cnefe) {
map <- map %>%
addCircleMarkers(
data = dengue_geocoded_CNEFE,
lng = ~long,
lat = ~lat,
radius = 3,
color = "blue",
fillOpacity = 0.7,
popup = ~paste0("Padrão Ouro - ID: ", ID_UNICO)
)
}
map
})
}
# Rodar o aplicativo
shinyApp(ui, server)
runApp('chatgpt_acuracia2712_2.R')
runApp('chatgpt_acuracia2712_2.R')
runApp('chatgpt_acuracia2712_2.R')
runApp('chatgpt_acuracia2712_2.R')
runApp('chatgpt_acuracia2712_2.R')
runApp('chatgpt_acuracia2712_2.R')
library(shiny); runApp('chatgpt_acuracia2712_2.R')
runApp('chatgpt_acuracia2712_2.R')
runApp('chatgpt_acuracia2712_2.R')
library(shiny); runApp('chatgpt_acuracia2712_2.R')
runApp('chatgpt_acuracia2712_3comtabe.R')
runApp('chatgpt_acuracia2712_3comtabe.R')
library(shiny); runApp('chatgpt_acuracia2712_3comtabe.R')
library(shiny); runApp('chatgpt_acuracia2712_3comtabe.R')
library(shiny); runApp('chatgpt_acuracia2712_3comtabe.R')
library(shiny); runApp('chatgpt_acuracia2712_2.R')
runApp('chatgpt_acuracia2712_3comtabe.R')
library(shiny); runApp('chatgpt_acuracia2712_3comtabe.R')
runApp('chatgpt_acuracia2712_3comtabe.R')
runApp('chatgpt_acuracia2712_3comtabe.R')
runApp()
rm(list = ls())
gc(T)
runApp()
runApp('C:/Users/Sanglard/Desktop/R_Walter/Antigos/Painel BACKUP/chatgpt_acuracia2712_3comtabe.R')
runApp()
runApp('C:/Users/Sanglard/Desktop/R_Walter/Antigos/Painel BACKUP/chatgpt_acuracia2712_3comtabe.R')
runApp()
runApp()
runApp()
runApp('C:/Users/Sanglard/Desktop/R_Walter/Antigos/Painel BACKUP/chatgpt_acuracia2712_2.R')
runApp()
runApp('C:/Users/Sanglard/Desktop/R_Walter/Antigos/Painel BACKUP/chatgpt_acuracia2712.R')
runApp()
runApp()
runApp()
runApp()
install.packages("cachem")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes"
install.packages("shinythemes")
install.packages("shinythemes")
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
dengue_ouro <- read.csv("./CNEFE_PADRAO_OURO.csv")
library(shiny); runApp('app - Copia.R')
runApp('app - Copia.R')
runApp('app - Copia.R')
runApp('app - Copia.R')
runApp('app - Copia.R')
dengue_ouro <- read.csv("./DENGUE_PADRAO_OURO.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
runApp('app - Copia.R')
runApp('app - Copia.R')
runApp('app - Copia.R')
runApp('app - Copia.R')
runApp('app - Copia.R')
runApp('app - Copia.R')
runApp('app - Copia.R')
runApp('app - Copia.R')
runApp('app - Copia.R')
runApp('app - Copia.R')
View(dengue_ouro)
runApp('app - Copia.R')
# Leia os bancos de dados
dengue_geocoded_ARCGIS <- read.csv("./DENGUE_ARCGIS.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_geocoded_OSM <- read.csv("./DENGUE_OSM.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_geocoded_GOOGLE <- read.csv("./DENGUE_GOOGLE.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_geocoded_CNEFE <- read.csv("./DENGUE_CNEFE.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_ouro <- read.csv("./CNEFE_PADRAO_OURO.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
View(dengue_ouro)
View(dengue_geocoded_GOOGLE)
print(unmatched_ids)
unmatched_ids <- anti_join(api_df, ouro_df, by = "ID_UNICO")
runApp('app - Copia.R')
View(dengue_geocoded_CNEFE)
runApp('app - Copia.R')
ids_cnefe <- dengue_geocoded_CNEFE$ID_UNICO
ids_ouro <- dengue_ouro$ID_UNICO
ids_nao_correspondentes <- setdiff(ids_cnefe, ids_ouro)
print(ids_nao_correspondentes)
View(dengue_ouro)
View(dengue_geocoded_CNEFE)
library(shiny); runApp('app - Copia.R')
runApp('app - Copia.R')
runApp('app - Copia - SEM TABELA.R')
runApp('app - Copia - SEM TABELA.R')
runApp()
rm(list = ls())
gc(T)
library(shiny); runApp('app - Copia - SEM TABELA.R')
runApp('app - Copia - SEM TABELA.R')
runApp('app - Copia - SEM TABELA.R')
runApp('app - Copia - SEM TABELA.R')
runApp('app - Copia.R')
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
dengue_ouro <- read.csv("./CNEFE_PADRAO_OURO.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
library(shiny)
library(leaflet)
library(ggplot2)
library(dplyr)
library(sf)
library(RColorBrewer)
library(cachem)
library(shinythemes)
dengue_ouro <- read.csv("./CNEFE_PADRAO_OURO.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
# Leia os bancos de dados
dengue_geocoded_ARCGIS <- read.csv("./DENGUE_ARCGIS.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_geocoded_OSM <- read.csv("./DENGUE_OSM.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_geocoded_GOOGLE <- read.csv("./DENGUE_GOOGLE.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_geocoded_CNEFE <- read.csv("./DENGUE_CNEFE1.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
dengue_ouro <- read.csv("./CNEFE_PADRAO_OURO.csv", sep = ",") %>%
filter(!is.na(lat)) %>%
mutate(SG_UF_NOT = as.numeric(SG_UF_NOT))
View(dengue_geocoded_CNEFE)
denguecnefe <- dengue_geocoded_CNEFE |>
filter(similarity => 0.3)
denguecnefe <- dengue_geocoded_CNEFE |>
filter(similarity >= 0.3)
denguecnefe <- dengue_geocoded_CNEFE |>
filter(similarity >= 0.2)
